1
00:00:06,200 --> 00:00:10,150
今天我们讲一下比特币交易里使用的脚本语言

2
00:00:12,250 --> 00:00:14,446
这是比特币的一个交易实例

3
00:00:15,130 --> 00:00:17,038
这个交易有一个输入

4
00:00:17,340 --> 00:00:18,340
两个输出

5
00:00:19,210 --> 00:00:21,430
左边这个地方写的是output

6
00:00:21,900 --> 00:00:23,820
其实是这个交易的输入

7
00:00:24,390 --> 00:00:30,550
它的意思是说这个输入中使用的B是来自前面哪个交易的输出

8
00:00:32,800 --> 00:00:34,696
右边的两个output中

9
00:00:34,880 --> 00:00:36,960
下面那个已经划出去了

10
00:00:37,210 --> 00:00:38,686
上面那个还没划出去

11
00:00:40,570 --> 00:00:43,160
这个交易已经收到了23个确认

12
00:00:43,690 --> 00:00:46,190
所以回滚的可能性很小了

13
00:00:48,950 --> 00:00:51,770
下面是这个交易的输入和输出脚本

14
00:00:52,940 --> 00:00:55,180
输入脚本包含两个操作

15
00:00:55,900 --> 00:00:59,020
分别把两个很长的竖压入栈里

16
00:01:00,010 --> 00:01:03,178
比特币使用的脚本语言是非常简单的

17
00:01:03,870 --> 00:01:07,326
唯一能访问的内存空间就是一个堆栈

18
00:01:08,240 --> 00:01:12,992
不像通用的编程语言像CC加加呀那样有全局变量

19
00:01:13,200 --> 00:01:16,565
局部变量还有什么动态分配的内存空间

20
00:01:17,350 --> 00:01:18,694
它这里就是一个栈

21
00:01:19,360 --> 00:01:24,040
所以叫做基于栈的语言stack based language

22
00:01:25,020 --> 00:01:27,220
这里的输出脚本有两行

23
00:01:27,960 --> 00:01:30,303
分别对应上面的两个输出

24
00:01:31,030 --> 00:01:33,940
每个输出有自己单独的一段脚本

25
00:01:37,830 --> 00:01:40,182
下面我们看一下这个交易的具体内容

26
00:01:40,940 --> 00:01:44,076
首先看一下这个交易的一些宏观信息

27
00:01:44,740 --> 00:01:46,140
就所谓的叫meta data

28
00:01:47,450 --> 00:01:50,033
包括这第一行的transaction ID

29
00:01:50,820 --> 00:01:54,438
然后第二行的hash这个交易的哈希值

30
00:01:55,430 --> 00:01:59,822
然后接下来是version使用的比特币协议的版本

31
00:01:59,840 --> 00:02:02,960
后size是这个交易的大小

32
00:02:03,920 --> 00:02:07,396
这个lock time的话我们以前没有接触过

33
00:02:08,100 --> 00:02:12,424
Knock time是指用来设定交易的生效时间

34
00:02:12,990 --> 00:02:14,278
在这里写的是零

35
00:02:14,480 --> 00:02:15,710
表示立即生效

36
00:02:16,280 --> 00:02:19,074
就绝大多数情况下这个lock time都是0

37
00:02:20,060 --> 00:02:21,596
如果是非零值的话

38
00:02:21,880 --> 00:02:24,968
那么这个交易要过一段时间才能生效

39
00:02:25,790 --> 00:02:30,410
比如说要等十个区块以后才能够被写入区块链里

40
00:02:31,330 --> 00:02:37,130
有一些比较特殊的transaction会用到这些now time feature

41
00:02:38,650 --> 00:02:42,493
下面这个vin和v out的是输入输出部分

42
00:02:42,930 --> 00:02:44,498
我们后面会详细讲

43
00:02:44,990 --> 00:02:53,682
就在这个PPT上我们没有把它展开写block hash是这个交易所在的区块的哈希值

44
00:02:54,730 --> 00:02:58,384
我们可以看到这个哈希值也是有一长串的零开头

45
00:02:59,080 --> 00:03:03,449
就是挖矿要求的这个难度要求都是这样

46
00:03:03,990 --> 00:03:07,905
Confirmation是这个交易已经有多少个确认信息

47
00:03:08,580 --> 00:03:10,263
就像我们前面一页看到的

48
00:03:10,560 --> 00:03:12,978
这个交易是有23个确认信息

49
00:03:13,980 --> 00:03:15,982
Time是这个交易产生的时间

50
00:03:16,830 --> 00:03:19,290
block time是这个区块产生的时间

51
00:03:19,820 --> 00:03:28,390
这两个时间就这个time和block time都是表示成从某个很早的时间点到现在过了多少秒

52
00:03:31,010 --> 00:03:32,603
这是交易的输入结构

53
00:03:33,380 --> 00:03:35,120
是个数组

54
00:03:35,620 --> 00:03:37,512
一个交易可以有多个输入

55
00:03:37,930 --> 00:03:39,098
我们这个例子当中

56
00:03:39,230 --> 00:03:40,329
它只有一个输入

57
00:03:40,930 --> 00:03:46,762
每个输入都要说明这个输入花的币是来自之前哪个交易的输出

58
00:03:47,580 --> 00:03:52,460
所以它这个前两行就是给出输出这个币的来源

59
00:03:53,760 --> 00:03:57,192
第一个传达tion ID就是之前这个交易的哈希值

60
00:03:58,260 --> 00:04:01,661
v out表示是这个交易里的第几个输出

61
00:04:02,720 --> 00:04:03,704
这大家听明白了吗

62
00:04:03,930 --> 00:04:05,148
就这个例子当中

63
00:04:05,270 --> 00:04:08,633
它就是说花的这个币就是来自于这个哈希值

64
00:04:08,640 --> 00:04:13,869
就是这个C0CB开头的这个交易中第零个输出

65
00:04:15,540 --> 00:04:17,232
接下来就是输入脚本

66
00:04:17,810 --> 00:04:20,180
这个输入脚本叫做scp sig

67
00:04:21,700 --> 00:04:26,371
因为输入脚本最简单的形式就是给出一个signal就行了

68
00:04:26,780 --> 00:04:28,500
证明你有权利花这个钱

69
00:04:29,090 --> 00:04:31,226
我们后面的这个PPT当中

70
00:04:31,510 --> 00:04:35,571
这个script sig我们就直接写成input script

71
00:04:36,010 --> 00:04:36,700
有输入脚本

72
00:04:37,890 --> 00:04:39,827
如果一个交易有多个输入的话

73
00:04:40,350 --> 00:04:42,582
每个输入都要说明B的来源

74
00:04:42,790 --> 00:04:44,029
并且要给出签名

75
00:04:45,380 --> 00:04:48,910
也就是说比特币中的一个交易可能需要多个签名

76
00:04:51,570 --> 00:04:52,984
这是交易的输出

77
00:04:53,130 --> 00:04:54,570
也是一个数组结构

78
00:04:55,120 --> 00:04:57,416
我们这个例子当中是有两个输出

79
00:04:58,020 --> 00:04:59,918
这个value是输出的金额

80
00:05:00,680 --> 00:05:02,492
也就是给对方转过去多少钱

81
00:05:03,300 --> 00:05:04,947
这里的单位是比特币

82
00:05:05,510 --> 00:05:08,910
所以它这里是0．22684个比特币

83
00:05:09,970 --> 00:05:13,106
也有的地方是表示成satoshi

84
00:05:13,760 --> 00:05:15,795
就patos就是叫一冲

85
00:05:16,510 --> 00:05:20,542
比特币里的最小单位satoshi这个单位是很小的

86
00:05:21,130 --> 00:05:23,306
所以如果表示成satoshi的话

87
00:05:23,500 --> 00:05:26,022
转账的金额看上去都是很大的

88
00:05:26,760 --> 00:05:27,740
像这个例子当中

89
00:05:27,740 --> 00:05:29,660
如果我们把它表示成patos的话

90
00:05:29,960 --> 00:05:33,249
就是22684000冲

91
00:05:34,900 --> 00:05:36,804
这个N是序号表示

92
00:05:36,810 --> 00:05:43,355
这是这个交易里的第几个输出这个script pub key就是输出脚本

93
00:05:44,060 --> 00:05:46,920
就是我们后面都写成output script

94
00:05:47,820 --> 00:05:50,680
那为什么它这里叫script pokey

95
00:05:51,020 --> 00:05:55,332
因为输出脚本最简单的形式就是给出一个public key

96
00:05:56,700 --> 00:05:59,922
下面这个ASM显示的是输出脚本的内容

97
00:06:01,580 --> 00:06:03,150
里面包含一系列的操作

98
00:06:03,610 --> 00:06:07,495
这个我们后面会详细解释它这个操作是什么意思

99
00:06:08,940 --> 00:06:13,100
Request这个是说这个输出需要多少个签名才能兑现

100
00:06:14,040 --> 00:06:15,048
这两个例子当中

101
00:06:15,400 --> 00:06:17,380
都是只需要一个签名就够了

102
00:06:18,030 --> 00:06:20,010
我们后面会讲到mult

103
00:06:20,490 --> 00:06:21,690
就是多重签名

104
00:06:22,160 --> 00:06:24,140
有的输出要多个签名才行

105
00:06:25,520 --> 00:06:27,260
这个type是输出的类型

106
00:06:27,810 --> 00:06:34,320
这两个类型都是public key hash是公钥的哈希address是输出的地址

107
00:06:38,000 --> 00:06:42,136
下面我们看一下这些输​‌​‌​​‌‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​​‌‌‌​‌​​‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌​​‌‌‌‌‌‌​​‌‌‌​​‌​​‌‌​‌​‌​​‌‌‌‌‌‌​​‌‌​​​‌​​‌‌​​‌‌‌‌​‌‌​​‌​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌​​​‌​​‌‌​‌‌‌​​‌‌‌​​‌​​‌‌​‌‌‌‌‌​‌‌‌‌​​​‌‌‌​‌‌​​‌‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌​‌‌‌​​‌‌​‌‌​​​‌‌​‌‌‌​​‌‌​​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌​​​‌‌​​‌‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌​​‌‌​‌‌​​​‌‌​​‌‌‌‌​‌​‌‌​​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌​‌‌‌​‌​​​‌​​‌‌‌​​‌‌‌​‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌入和输出脚本是怎么执行的

108
00:06:42,370 --> 00:06:45,025
上面我们画的是一个小型的区块链

109
00:06:45,890 --> 00:06:50,469
在前面这个区块里有一个A给B的转账交易

110
00:06:50,830 --> 00:06:54,826
A转给了B那B收到这个转过来的B之后

111
00:06:55,360 --> 00:07:03,685
在后面这个区块里就隔了两个区块里把这些B又转给了C也就是说我们这个例子当中

112
00:07:04,180 --> 00:07:06,223
B给C的这个交易中

113
00:07:06,550 --> 00:07:10,958
B的来源是来自于前面A转给B的这个交易

114
00:07:11,960 --> 00:07:18,514
所以下面这个内容里我们就可以看到B转给C的这个交易的输入里

115
00:07:18,540 --> 00:07:24,830
这个traction ID和v out指向的是A转给B的这个交易的输出

116
00:07:26,850 --> 00:07:28,592
要验证这个交易的合法性

117
00:07:29,100 --> 00:07:37,580
是要把B转给C这个交易的输入脚本跟A转给B的交易的输出脚本拼接在一起来执行的

118
00:07:39,610 --> 00:07:41,146
注意这里有个交叉

119
00:07:41,720 --> 00:07:44,765
前面这个交易的输出脚本放在后面

120
00:07:45,340 --> 00:07:48,460
后面这个交易的输入脚本放在前面

121
00:07:48,900 --> 00:07:51,400
在早期的比特币实践中

122
00:07:51,890 --> 00:07:55,785
这两个脚本是拼接在一起从头到尾执行一遍

123
00:07:56,310 --> 00:07:59,016
后来出于安全因素的考虑

124
00:07:59,450 --> 00:08:02,024
这两个脚本改为分别执行

125
00:08:02,760 --> 00:08:06,568
首先执行输入脚本如果没有出错

126
00:08:07,050 --> 00:08:11,242
那么在执行输出脚本如果能顺利执行

127
00:08:11,620 --> 00:08:14,249
最后栈顶的结果为非零值

128
00:08:14,630 --> 00:08:15,718
也就是触

129
00:08:16,110 --> 00:08:17,310
那么验证通过

130
00:08:17,480 --> 00:08:18,758
这个交易就是合法的

131
00:08:20,040 --> 00:08:22,653
如果执行过程中出现任何错误

132
00:08:22,940 --> 00:08:24,317
这个交易就是非法的

133
00:08:25,760 --> 00:08:28,100
如果一个交易有多个输入的话

134
00:08:28,550 --> 00:08:35,990
那么每个输入脚本都要和所对应的交易的输出脚本匹配之后来进行验证

135
00:08:36,460 --> 00:08:37,870
全都验证通过

136
00:08:38,160 --> 00:08:39,610
这个交易才是合法的

137
00:08:41,710 --> 00:08:45,006
我们来看看输入输出脚本的几种形式

138
00:08:45,710 --> 00:08:49,220
一种最简单的形式就是pay to public key

139
00:08:49,900 --> 00:08:53,185
输出脚本里直接给出收款人的公钥

140
00:08:54,060 --> 00:08:57,418
第二行的这个check sig是检查签名的操作

141
00:08:58,300 --> 00:09:01,285
在输入脚本里直接给出签名就行了

142
00:09:02,010 --> 00:09:07,560
这个签名是用私钥对这个输入脚本所在的整个交易的签名

143
00:09:08,270 --> 00:09:09,827
这种形式是最简单的

144
00:09:10,350 --> 00:09:14,170
因为public key是直接在输出脚本里给出的

145
00:09:16,340 --> 00:09:18,518
我们看一下实际执行情况

146
00:09:19,430 --> 00:09:24,720
第三行是把输入脚本和输出脚本拼接起来之后的结果

147
00:09:25,440 --> 00:09:27,204
第一行来自输入脚本

148
00:09:28,140 --> 00:09:30,228
后两行来自输出脚本

149
00:09:31,260 --> 00:09:33,180
注意就像刚才说的

150
00:09:33,570 --> 00:09:36,254
实际代码中出于安全考虑

151
00:09:36,690 --> 00:09:40,400
这两段脚本实际上是分别执行的

152
00:09:40,400 --> 00:09:43,340
我们这个PPT里面为了方便起见

153
00:09:43,640 --> 00:09:46,720
就把这两段脚本拼接在一起显示

154
00:09:47,200 --> 00:09:49,904
然后从上往下一条语句来执行

155
00:09:51,240 --> 00:09:52,150
第一条语句

156
00:09:52,310 --> 00:09:55,000
把输入脚本里提供的签名压入栈

157
00:09:57,680 --> 00:10:01,790
第二条是把输出里提供公钥压入栈

158
00:10:03,700 --> 00:10:08,722
第三条这个check sig它的作用是把栈顶的这两个元素弹出来

159
00:10:09,270 --> 00:10:12,420
用公钥检查一下这个签名是否正确

160
00:10:14,340 --> 00:10:15,300
如果正确的话

161
00:10:15,300 --> 00:10:17,424
返回处说明验证通过

162
00:10:17,930 --> 00:10:19,714
否则的话执行出错

163
00:10:19,980 --> 00:10:21,510
那么这个交易就是非法的

164
00:10:25,670 --> 00:10:27,854
这是pay to public key的一个实例

165
00:10:28,580 --> 00:10:32,665
上面这个交易的输入脚本就是把签名压入栈

166
00:10:32,750 --> 00:10:35,027
它就一行就押入这个签名

167
00:10:35,520 --> 00:10:39,408
下面这个交易是上面这个输入的B的来源

168
00:10:40,210 --> 00:10:41,687
它的输出有两行

169
00:10:42,190 --> 00:10:43,970
第一行是把公钥压入栈

170
00:10:44,450 --> 00:10:46,160
第二行就是check sig

171
00:10:48,980 --> 00:10:49,988
这是第一种形式

172
00:10:51,020 --> 00:10:52,592
下面我们看一下第二种形式

173
00:10:53,820 --> 00:10:55,602
pay to public key hash

174
00:10:56,480 --> 00:11:04,075
这种形式与刚才讲的那种形式的区别在于输出脚本里没有直接给出收款人的公钥

175
00:11:04,470 --> 00:11:06,180
给出的是公钥的哈希

176
00:11:06,960 --> 00:11:09,900
公钥是在输入脚本里给出的

177
00:11:10,150 --> 00:11:12,210
输入脚本既要给出签名

178
00:11:12,520 --> 00:11:13,846
也要给出公钥

179
00:11:15,000 --> 00:11:17,119
输出脚本里其他还有一些操作

180
00:11:18,040 --> 00:11:19,144
像一开始的dup

181
00:11:19,520 --> 00:11:21,190
然后第二行的是160

182
00:11:21,780 --> 00:11:25,416
这些操作都是为了验证这个签名的正确性

183
00:11:26,600 --> 00:11:28,940
这种形式实际上是最常用的

184
00:11:29,030 --> 00:11:32,480
就是这个pay to public key hash是最常用的一种形式

185
00:11:35,080 --> 00:11:37,636
下面我们看一下这个脚本执行起来的结果

186
00:11:38,290 --> 00:11:42,175
这个是把上一页的输入脚本和数据脚本拼接之后

187
00:11:42,780 --> 00:11:46,308
得到了前两条语句来自输入脚本

188
00:11:46,630 --> 00:11:48,720
后面的语句来自输出脚本

189
00:11:49,370 --> 00:11:52,399
还是从上往下执行第一条语句

190
00:11:52,760 --> 00:11:54,020
先把签名压入栈

191
00:11:55,560 --> 00:11:56,520
第二条语句

192
00:11:56,520 --> 00:11:57,678
把公钥压入栈

193
00:11:59,340 --> 00:12:04,514
第三条语句这个dupe它的含义是把栈顶的元素复制一遍

194
00:12:05,140 --> 00:12:07,032
所以栈顶又多了一个公钥

195
00:12:08,790 --> 00:12:14,379
下一条语句hash 160是把这个栈顶元素弹出来取哈希

196
00:12:14,830 --> 00:12:17,170
然后把得到的哈希值再压入栈

197
00:12:18,650 --> 00:12:21,484
所以栈顶变成了公钥的哈希值

198
00:12:22,650 --> 00:12:27,525
下面一条语句是把输出脚本里提供的公钥的哈希值压入栈

199
00:12:29,420 --> 00:12:31,772
这个时候栈顶有两个哈希值

200
00:12:32,460 --> 00:12:34,690
大家注意搞清楚他们是怎么来的

201
00:12:36,900 --> 00:12:43,010
上面这个哈希值是输出脚本里面提供的收款人的公钥的哈希

202
00:12:43,410 --> 00:12:45,690
就是我发布这个交易的时候

203
00:12:45,690 --> 00:12:47,814
我这个转账的钱要转给谁的

204
00:12:48,140 --> 00:12:51,085
在输出脚本里提供一个收款人的公有的哈希

205
00:12:52,100 --> 00:12:55,313
下面这个哈希值是你要花这个钱的时候

206
00:12:55,320 --> 00:12:57,817
在输入脚本里给出的公钥

207
00:12:58,070 --> 00:13:03,868
然后前面那个操作这hash 160操作取哈希后得到的

208
00:13:04,430 --> 00:13:09,902
那么在下面这个equal verify这个操作的作用是弹出栈顶的两个元素

209
00:13:10,570 --> 00:13:11,954
比较它们是否相等

210
00:13:13,560 --> 00:13:16,059
就比较这个栈顶的两个哈希值是否相等

211
00:13:16,740 --> 00:13:17,950
这样做的目的是什么

212
00:13:21,800 --> 00:13:23,168
我们前面课上讲过

213
00:13:23,170 --> 00:13:24,826
防止有人冒名顶替

214
00:13:25,330 --> 00:13:28,165
用他自己的公钥冒充收款人的公钥

215
00:13:28,890 --> 00:13:30,762
假设这两个哈希值是相等的

216
00:13:30,970 --> 00:13:32,400
那么就从占领消失了

217
00:13:34,550 --> 00:13:37,410
最后一条这个check我们前面已经讲过了

218
00:13:37,710 --> 00:13:39,402
弹出栈顶的两个元素

219
00:13:39,690 --> 00:13:42,732
用公钥检查这个腔名是否正确

220
00:13:44,450 --> 00:13:46,120
假设这个签名是正确的

221
00:13:46,430 --> 00:13:48,818
那么整个脚本顺利运行结束

222
00:13:49,140 --> 00:13:50,390
栈顶留下的是触

223
00:13:53,030 --> 00:13:55,716
如果执行过程中任何一个环节发生错误

224
00:13:56,080 --> 00:14:00,312
比如输入里给出的公钥跟输出里给出的哈希值对不上

225
00:14:00,920 --> 00:14:05,180
或者是输入里给出的签名跟给出的公钥对不上

226
00:14:05,590 --> 00:14:07,140
那么这个交易就是非法的

227
00:14:11,430 --> 00:14:14,468
Pay to public key hash是最常用的脚本形式

228
00:14:15,150 --> 00:14:20,610
我们这个PPT第一页显示的那个实例用的就是这种形式的脚本

229
00:14:21,200 --> 00:14:24,082
现在我们应该能够看懂了

230
00:14:24,351 --> 00:14:30,315
这个input script和output script这个输入脚本就是把签名压入栈

231
00:14:31,370 --> 00:14:32,696
把公钥压入栈

232
00:14:33,510 --> 00:14:38,210
下面这个输出脚本复制栈顶元素这个delp

233
00:14:39,760 --> 00:14:41,824
取哈希值hash 160

234
00:14:42,900 --> 00:14:45,292
第三个是把公钥的哈希压入栈

235
00:14:46,700 --> 00:14:50,348
最后equal verify比较栈顶的两个哈希值

236
00:14:50,750 --> 00:14:52,500
然后check sig检查签名

237
00:14:57,540 --> 00:15:03,770
最后一种也是最复杂的一种脚本形式是pay to script hash

238
00:15:04,570 --> 00:15:10,711
这种形式的输出脚本给出的不是收款人的公钥的哈希

239
00:15:11,510 --> 00:15:14,675
而是收款人提供的一个脚本的哈希

240
00:15:15,470 --> 00:15:20,046
这个脚本叫radium script赎回脚本

241
00:15:20,950 --> 00:15:22,525
将来花这个钱的时候

242
00:15:22,980 --> 00:15:29,202
输入脚本里要给出这个radium script这个赎回脚本的具体内容

243
00:15:29,900 --> 00:15:36,300
同时还要给出让这个赎回脚本能够正确运行所需要的签名

244
00:15:39,670 --> 00:15:41,317
验证的时候分为两步

245
00:15:42,320 --> 00:15:51,896
第一步验证输入脚本里给出的这个赎回脚本是不是跟输出脚本里给出的哈希值匹配

246
00:15:53,080 --> 00:15:54,347
如果不匹配的话

247
00:15:54,730 --> 00:15:57,970
那么说明给出的赎回脚本是不对的

248
00:15:58,870 --> 00:16:05,954
就类似于刚才讲的那种pay to public key hash里面给出的公钥不对应这个地方

249
00:16:06,310 --> 00:16:09,190
如果这个跟哈希值匹配不上

250
00:16:09,200 --> 00:16:11,258
说明你给出的赎回脚本是不对的

251
00:16:11,820 --> 00:16:13,004
那么验证就失败了

252
00:16:14,280 --> 00:16:17,736
如果输入里给出的赎回脚本是正确的

253
00:16:18,310 --> 00:16:23,966
那么第二步还要把这个赎回脚本的内容当做操作指令来执行一遍

254
00:16:24,430 --> 00:16:26,630
看看最后能不能顺利执行

255
00:16:27,920 --> 00:16:29,890
如果两步验证都通过了

256
00:16:30,080 --> 00:16:31,587
那么这个交易才是合法的

257
00:16:33,400 --> 00:16:35,127
这个听上去好像有点抽象

258
00:16:36,080 --> 00:16:37,940
我们下面看一个具体的例子

259
00:16:38,530 --> 00:16:44,550
用pay to script hash实现我们前面说的pay to public key的功能

260
00:16:48,030 --> 00:16:50,396
这里的输入脚本就是给出签名

261
00:16:50,700 --> 00:16:53,417
再给出序列化的赎回脚本

262
00:16:54,490 --> 00:16:57,077
赎回脚本的内容就是给出公钥

263
00:16:57,230 --> 00:16:59,858
然后用这个check sig检查签名

264
00:17:01,260 --> 00:17:07,870
下面这个输出脚本是用来验证输入脚本里给出的赎回脚本是否正确

265
00:17:10,630 --> 00:17:14,380
我们看一下这个pay to script hash的执行过程

266
00:17:15,550 --> 00:17:20,302
开始的时候也是把输入脚本和输出脚本拼接在一起

267
00:17:21,400 --> 00:17:23,317
前两行来自输入脚本

268
00:17:23,630 --> 00:17:25,790
后面三行来自输出脚本

269
00:17:26,580 --> 00:17:29,210
首先把输入脚本的signal压入栈

270
00:17:31,860 --> 00:17:33,970
然后把赎回脚本压入栈

271
00:17:37,580 --> 00:17:41,920
然后是这个取哈希的操作得到赎回脚本的哈希

272
00:17:43,610 --> 00:17:49,814
这个RSH是指radium script hash赎回脚本的哈希值

273
00:17:51,640 --> 00:17:55,710
接下来还要把输出脚本里给出的这个哈希值压入栈

274
00:17:57,700 --> 00:18:00,516
这个时候这个站里就有两个哈希值了

275
00:18:01,200 --> 00:18:05,360
最后用eco比较一下这两个哈希值是否相等

276
00:18:06,200 --> 00:18:07,346
如果不等的话

277
00:18:07,390 --> 00:18:08,554
那就game over了

278
00:18:09,270 --> 00:18:10,635
假设这两个相等

279
00:18:11,280 --> 00:18:14,120
那这两个哈希值就从栈顶消失了

280
00:18:16,640 --> 00:18:17,129
到这里

281
00:18:17,660 --> 00:18:19,640
第一阶段的验证就算结束了

282
00:18:20,340 --> 00:18:22,980
接下来还要进行第二个阶段的验证

283
00:18:24,670 --> 00:18:32,513
第二个阶段首先要把输入脚本里提供的序列化的赎回脚本进行反序列化

284
00:18:33,240 --> 00:18:38,392
这个反序列化的操作在这个PPT上并没有展现出来

285
00:18:38,960 --> 00:18:42,044
这是每个节点自己要完成的

286
00:18:43,250 --> 00:18:44,930
执行这个赎回脚本

287
00:18:45,600 --> 00:18:48,800
首先把这个WP压入栈

288
00:18:51,070 --> 00:18:56,605
然后用这个check sig验证一下输入脚本里给出的这个signature的正确性

289
00:18:57,470 --> 00:18:58,586
验证通过之后

290
00:18:58,710 --> 00:19:02,120
整个pyto script hash才算执行完成

291
00:19:05,690 --> 00:19:06,458
看到这里

292
00:19:06,460 --> 00:19:08,374
同学们可能会有一个疑问

293
00:19:09,060 --> 00:19:10,508
搞这么复杂干嘛呀

294
00:19:11,510 --> 00:19:15,425
就用前面讲过的pay to public key不就行了吗

295
00:19:16,780 --> 00:19:21,500
为什么一定要把这部分功能嵌入到赎回脚本里面

296
00:19:25,930 --> 00:19:28,918
确实对这个简单的例子来说

297
00:19:29,230 --> 00:19:31,219
这么搞是有点复杂了

298
00:19:32,720 --> 00:19:38,529
Pay to script hash这个功能在最初版本的比特币里面是没有的

299
00:19:39,180 --> 00:19:42,498
后来通过软分叉的形式加进去了

300
00:19:43,440 --> 00:19:49,180
它的一个常见的应用场景就是对多重签名的支持

301
00:19:52,740 --> 00:19:59,240
比特币系统中一个输出可能要求多个签名才能把钱取出来

302
00:20:00,710 --> 00:20:09,674
比如某个公司的账户可能要求五个合伙人中任意三个人的签名

303
00:20:09,990 --> 00:20:12,804
才能把这个公司账户上的钱取走

304
00:20:14,220 --> 00:20:20,790
这样为私钥的泄露提供了一些安全的保护

305
00:20:21,460 --> 00:20:25,188
比如说有某个合伙人私钥泄露出去了

306
00:20:25,850 --> 00:20:27,250
那么问题也不大

307
00:20:27,600 --> 00:20:32,040
因为还需要另外两个人的签名才能把钱取出来

308
00:20:33,460 --> 00:20:39,529
同时他也为私钥的丢失提供了一些冗余

309
00:20:40,200 --> 00:20:41,635
就五个合伙人中

310
00:20:42,160 --> 00:20:45,618
即使有两个人把私钥给忘掉了

311
00:20:46,430 --> 00:20:49,384
剩下三个人仍然可以把钱取出来

312
00:20:49,790 --> 00:20:52,340
然后转到某一个安全的账户

313
00:20:55,190 --> 00:20:59,246
这个功能是通过check multi sig来实现的

314
00:20:59,650 --> 00:21:03,450
就是这一页最后一行这个check moti这个操作

315
00:21:04,820 --> 00:21:07,350
输出脚本里给出N个公钥

316
00:21:07,920 --> 00:21:19,057
同时指定一个阈值M输入脚本只要提供这N个公钥对应的签名中任意M个合法的签名就能通过验证

317
00:21:20,220 --> 00:21:21,960
比如刚才举的那个例子当中

318
00:21:22,040 --> 00:21:22,940
N等于5

319
00:21:23,170 --> 00:21:28,400
M等于三五个合伙人中任意三个人的签名都可以

320
00:21:30,600 --> 00:21:34,632
输入脚本的第一行有一个红色的叉子

321
00:21:35,390 --> 00:21:38,760
它这个是情况是这样的

322
00:21:39,500 --> 00:21:43,400
比特币中check multi g的实现有一个bug

323
00:21:44,840 --> 00:21:48,869
执行的时候会从堆栈上多弹出一个元素

324
00:21:50,290 --> 00:21:52,015
这个就是他代码实现的一个bug

325
00:21:52,780 --> 00:21:55,165
这个bug现在已经没有办法改了

326
00:21:56,520 --> 00:21:58,332
因为这是个去中心化的系统

327
00:21:58,740 --> 00:22:02,960
你要想通过软件升级的方法去修复这个bug

328
00:22:03,420 --> 00:22:05,340
这个代价是很大的

329
00:22:05,640 --> 00:22:07,413
要改的话需要硬分叉

330
00:22:08,500 --> 00:22:13,018
所以实际采用的解决方案是在输入脚本里

331
00:22:13,290 --> 00:22:16,832
网站上多压进去一个没用的元素

332
00:22:17,870 --> 00:22:22,770
第一行我们写的这个红色的叉子就是代表这个多余的元素

333
00:22:23,550 --> 00:22:27,425
为了迁就这个check mode c实现上的bug

334
00:22:27,690 --> 00:22:29,910
往堆栈上多压进去的元素

335
00:22:32,560 --> 00:22:36,725
另外注意给出的这M个签名的相对顺序

336
00:22:37,270 --> 00:22:42,040
要跟他们在N个公钥中的相对顺序是一致的才行

337
00:22:46,190 --> 00:22:48,550
这是check multi c的执行过程

338
00:22:49,470 --> 00:22:50,280
这个例子中

339
00:22:50,490 --> 00:22:53,883
假设三个签名中给出两个就行

340
00:22:54,920 --> 00:23:01,780
那大家可以看到这两个签名给出的相对顺序也是跟他们在公钥中的顺序是一样的

341
00:23:02,190 --> 00:23:03,600
在公钥当中

342
00:23:04,080 --> 00:23:07,200
第一个公钥排在第二个公钥的前面

343
00:23:07,630 --> 00:23:08,790
那么相对应的签名

344
00:23:09,130 --> 00:23:10,440
给出这两个签名的时候

345
00:23:10,440 --> 00:23:13,143
也是第一个签名排在第二个签名的签名

346
00:23:14,470 --> 00:23:20,060
这个第一行的false就是我们前面说的那个多余的元素

347
00:23:21,140 --> 00:23:23,548
首先把这个多余的元素压入栈里

348
00:23:24,970 --> 00:23:27,810
然后把这两个签名依次压入栈

349
00:23:31,000 --> 00:23:33,509
这个时候输入脚本就执行完了

350
00:23:33,880 --> 00:23:38,437
接下来的输出脚本里把M的值这个预值M压入栈

351
00:23:40,200 --> 00:23:41,950
然后把三个公钥压入栈

352
00:23:46,910 --> 00:23:48,746
然后把N的值压入栈

353
00:23:49,910 --> 00:23:57,008
最后就执行check multi sig看看这个堆栈里是不是包含了这三个签名中的两个

354
00:23:57,580 --> 00:23:58,540
如果是的话

355
00:23:58,540 --> 00:23:59,510
那么验证通过

356
00:24:05,020 --> 00:24:06,320
大家看看有什么问题吗

357
00:24:12,720 --> 00:24:17,804
注意这个过程当中并没有用到pay to script hash

358
00:24:18,610 --> 00:24:24,252
就是用比特币脚本中原生的check multi sig来实现的

359
00:24:25,300 --> 00:24:26,760
这么实现有什么问题吗

360
00:24:33,200 --> 00:24:36,210
早期的多重签名就是这样实现的

361
00:24:36,650 --> 00:24:38,015
在实际应用当中

362
00:24:39,180 --> 00:24:41,226
有一些不是很方便的地方

363
00:24:42,410 --> 00:24:44,300
比如网上购物

364
00:24:45,060 --> 00:24:47,544
某个电商用冒充签名

365
00:24:48,430 --> 00:24:54,680
那么要求五个合伙人中任意三个人的签名才能把钱取出来

366
00:24:55,850 --> 00:25:07,136
这就要求用户网上购物的用户在支付的时候生成的转账交易里给出这五个合伙人的公钥

367
00:25:07,830 --> 00:25:10,712
同时还要给出N和M的值

368
00:25:11,380 --> 00:25:17,792
像这个例子当中要写明N等于5

369
00:25:18,870 --> 00:25:19,790
M等于3

370
00:25:22,500 --> 00:25:25,846
这些都是用户在网上购物的时候

371
00:25:25,850 --> 00:25:29,828
生成转账交易时输出脚本里要给出的信息

372
00:25:30,250 --> 00:25:31,587
给出这五个公钥

373
00:25:31,590 --> 00:25:33,126
给出N和M是多少

374
00:25:34,540 --> 00:25:36,344
用户怎么知道这些信息呢

375
00:25:37,790 --> 00:25:41,836
需要这个购物网站在他的网上公布出来

376
00:25:42,540 --> 00:25:44,260
所以这个网上可以公布

377
00:25:44,260 --> 00:25:46,068
我们用了多重签名

378
00:25:46,760 --> 00:25:49,238
我们用了五个签名中要给出三个

379
00:25:49,530 --> 00:25:50,748
这是五个公钥

380
00:25:51,400 --> 00:25:54,430
然后用户生成这个转账交易的时候

381
00:25:54,430 --> 00:25:56,059
要把这些信息填进去

382
00:25:57,630 --> 00:25:58,610
不同的电商

383
00:25:59,750 --> 00:26:03,958
它采用的多重签名的规则是不一样的

384
00:26:04,610 --> 00:26:08,554
就有的电商可能是五个签名中任意三个

385
00:26:08,970 --> 00:26:13,509
有的可能要求五个签名中你要给出四个

386
00:26:13,520 --> 00:26:18,860
也有可能电商要求六个签名当中你要给出三个

387
00:26:19,090 --> 00:26:25,782
这都是有可能的这就给用户生成转账交易带来一些不方便的地方

388
00:26:26,610 --> 00:26:30,278
因为这些复杂性都暴露给用户了

389
00:26:31,730 --> 00:26:32,678
那么怎么办呢

390
00:26:33,270 --> 00:26:35,690
这就要用到pay to script hash

391
00:26:39,750 --> 00:26:43,614
这是用pay to script hash实现的多重签名

392
00:26:44,340 --> 00:26:49,598
它的本质是把复杂度从输出脚本转移到了输入脚本

393
00:26:50,670 --> 00:26:53,260
现在这个输出脚本变得非常简单

394
00:26:53,850 --> 00:27:01,287
只有这三行原来的复杂度被转移到了这个radium script赎回脚本里面

395
00:27:02,770 --> 00:27:07,096
输出脚本只要给出这个赎回脚本的哈希值就行了

396
00:27:08,100 --> 00:27:11,580
这个赎回脚本里要给出这N个公钥

397
00:27:11,990 --> 00:27:13,859
还有N和M的值

398
00:27:15,000 --> 00:27:17,832
这个赎回脚本是在输入脚本里提供的

399
00:27:18,650 --> 00:27:21,230
也就是说是由收款人提供的

400
00:27:22,560 --> 00:27:24,590
大家明白这样做的用意了吗

401
00:27:28,050 --> 00:27:30,138
像前面那个网上购物的例子

402
00:27:30,710 --> 00:27:32,276
收款人是电商

403
00:27:33,020 --> 00:27:37,466
他只要在网站上公布这个赎回脚本的哈希值

404
00:27:38,420 --> 00:27:41,371
然后用户生成转账交易的时候

405
00:27:41,960 --> 00:27:46,006
把这个哈希值包含在输出脚本里就行了

406
00:27:47,460 --> 00:27:51,030
至于这个电商用什么样的多重签名规则

407
00:27:51,860 --> 00:27:54,965
是五个里选三个还是三个里选两个

408
00:27:55,490 --> 00:27:57,503
对于用户来说是不可见的

409
00:27:58,090 --> 00:27:59,308
用户没必要知道

410
00:28:01,200 --> 00:28:02,768
从用户的角度来看

411
00:28:03,220 --> 00:28:10,874
采用这种支付方式跟采用前面说的pay to public key hash没有多大区别

412
00:28:11,440 --> 00:28:16,354
只不过把公钥的哈希值换成了赎回脚本的哈希值

413
00:28:17,620 --> 00:28:21,042
当然了输出脚本的写法上也有一些区别

414
00:28:21,360 --> 00:28:22,690
但不是本质性的

415
00:28:24,080 --> 00:28:28,656
这个输入脚本是电商在花掉这笔输出的时候提供的

416
00:28:29,320 --> 00:28:32,680
其中包含这个赎回脚本的序列化版本

417
00:28:33,420 --> 00:28:39,170
同时还包含让这个赎回脚本验证通过所需的M个签名

418
00:28:41,000 --> 00:28:45,620
将来如果这个电商改变了所采用的多重签名规则

419
00:28:46,440 --> 00:28:48,387
比如原来是五个里选三个

420
00:28:48,920 --> 00:28:50,740
现在变成三个里选两个

421
00:28:51,380 --> 00:28:55,480
那么只要改变这个输入脚本和赎回脚本的内容

422
00:28:56,030 --> 00:28:59,960
然后把新的哈希值公布出去就行了

423
00:29:00,350 --> 00:29:01,420
对用户来说

424
00:29:01,690 --> 00:29:05,991
只不过是付款的时候要包含的这个哈希值发生了变化

425
00:29:06,550 --> 00:29:09,300
其他的变化没有必要知道

426
00:29:13,350 --> 00:29:15,510
我们看一下具体的执行过程

427
00:29:16,620 --> 00:29:20,652
就是把输入脚本和输出脚本拼接在一起后的情况

428
00:29:21,880 --> 00:29:29,320
第一行的这个false就是为了应付check multi sig那个bug而准备的一个没用的元素

429
00:29:30,110 --> 00:29:32,150
执行的时候先把它压入栈

430
00:29:34,220 --> 00:29:36,370
然后依次把两个签名押入站

431
00:29:40,420 --> 00:29:43,080
接下来是这个序列化的赎回脚本

432
00:29:43,650 --> 00:29:46,620
目前只是把它作为数据压入栈

433
00:29:49,220 --> 00:29:51,644
到这里输入脚本就执行完了

434
00:29:51,940 --> 00:29:54,980
下面是输出脚本取哈希

435
00:29:57,790 --> 00:30:01,980
然后把输出脚本里提供的这个哈希值压入栈顶

436
00:30:04,680 --> 00:30:07,800
最后判断一下这两个哈希值是否相等

437
00:30:10,420 --> 00:30:11,110
到这里

438
00:30:11,200 --> 00:30:13,200
第一阶段的验证就完成了

439
00:30:16,380 --> 00:30:18,588
下面开始第二个阶段的验证

440
00:30:19,320 --> 00:30:21,640
把赎回脚本展开后执行

441
00:30:23,330 --> 00:30:24,630
先把M压入栈

442
00:30:26,930 --> 00:30:29,090
然后把三个公钥压入栈

443
00:30:32,330 --> 00:30:33,410
把N压入栈

444
00:30:35,090 --> 00:30:38,016
最后检查一下多重签名的正确性

445
00:30:38,480 --> 00:30:41,450
三个里面有两个是正确的

446
00:30:42,590 --> 00:30:48,400
第二阶段的验证过程跟前面直接使用check multi sig的情况是类似的

447
00:30:51,830 --> 00:30:56,695
这是网上使用pay to script hash来做多重签名的一个实例

448
00:30:57,770 --> 00:31:01,907
上面输入脚本的最后一个就是序列化的赎回脚本

449
00:31:02,740 --> 00:31:08,140
反序列化之后得到的就是三个里面取两个的多重签名脚本

450
00:31:09,470 --> 00:31:13,220
下面这个输出脚本的内容跟我们前面讲的是一样的

451
00:31:15,400 --> 00:31:20,390
现在的多重签名一般都是采用这种pay to script hash的形式

452
00:31:24,080 --> 00:31:28,355
最后我们要讲的这种脚本格式是比较特殊的

453
00:31:29,140 --> 00:31:33,342
这种格式的输出脚本开头是return这个操作

454
00:31:33,990 --> 00:31:41,158
后面可以跟任意的内容return这个操作的作用是无条件的返回错误

455
00:31:42,110 --> 00:31:50,435
所以包含这个操作的脚本永远不可能通过验证执行到这个return语句就会出错

456
00:31:50,900 --> 00:31:52,356
然后执行就终止了

457
00:31:53,170 --> 00:31:55,780
后面跟的内容根本没有机会执行

458
00:31:58,570 --> 00:32:01,090
同学们听到这里可能觉得很奇怪

459
00:32:01,830 --> 00:32:04,248
为什么要设计这样的输出脚本

460
00:32:05,920 --> 00:32:09,295
这样的输出岂不是永远花不出去吗

461
00:32:10,580 --> 00:32:12,946
你不论输入脚本写的是什么内容

462
00:32:13,760 --> 00:32:18,191
执行到输出的这个return语句他就报错了

463
00:32:19,100 --> 00:32:21,700
那么这里的钱永远都花不出去

464
00:32:23,620 --> 00:32:24,778
确实是这样的

465
00:32:25,360 --> 00:32:29,763
这个脚本是证明销毁比特币的一种方法

466
00:32:31,500 --> 00:32:33,372
那么为什么要销毁比特币呢

467
00:32:34,500 --> 00:32:36,084
比特币现在这么值钱

468
00:32:36,750 --> 00:32:40,169
你这么销毁掉岂不是非常可惜

469
00:32:41,780 --> 00:32:44,552
这个一般是有两种应用场景

470
00:32:45,200 --> 00:32:56,176
一种场景是有些小的币种要求销毁一定数量的比特币才能够得到这个币种

471
00:32:57,380 --> 00:33:00,200
有时候我们管这种小币种叫auto coin

472
00:33:08,560 --> 00:33:09,870
就是alternative core

473
00:33:21,650 --> 00:33:26,370
除了比特币之外的其他小的加密货币

474
00:33:26,660 --> 00:33:28,409
你都可以认为叫auto

475
00:33:28,960 --> 00:33:33,197
比如有的小币种可能要求你销毁一个比特币

476
00:33:33,540 --> 00:33:36,046
可以得到1000个这样的小币

477
00:33:37,170 --> 00:33:42,802
也就是说你要用这种方法证明你付出了一定的代价才能够得到这个小币种

478
00:33:44,360 --> 00:33:49,800
另外一个应用场景是往区块链里写入一些内容

479
00:33:50,700 --> 00:33:53,820
我们说区块链是个不可篡改的账本

480
00:33:55,050 --> 00:34:00,525
有人就利用这个特性往里面添加一些需要永久保存在内容

481
00:34:01,620 --> 00:34:07,090
比如说我们第一节课讲的一个场景是digital commitment

482
00:34:28,240 --> 00:34:32,065
你要证明在某个时间知道某些事情

483
00:34:33,120 --> 00:34:35,343
比如说涉及到知识产权保护的

484
00:34:36,520 --> 00:34:40,210
把某项知识产权的内容取哈希之后

485
00:34:40,610 --> 00:34:43,897
把哈希值放在这个return语句的后面

486
00:34:44,720 --> 00:34:48,160
这后面的内容反正是永远不会执行的

487
00:34:48,680 --> 00:34:50,540
你往里写什么都没关系

488
00:34:51,630 --> 00:34:54,920
而且你放在这里的是一个哈希值

489
00:34:56,230 --> 00:34:57,334
你有什么知识产权

490
00:34:57,340 --> 00:34:58,438
取个哈希之后

491
00:34:58,440 --> 00:34:59,560
把哈希值放在这

492
00:35:00,090 --> 00:35:02,320
这个不会占太大的地方

493
00:35:02,910 --> 00:35:06,406
而且也没有泄露出来你知识产权的具体内容

494
00:35:07,710 --> 00:35:09,414
将来如果出现纠纷

495
00:35:10,300 --> 00:35:13,840
像知识产权的一些专利诉讼

496
00:35:14,390 --> 00:35:16,970
那么你再把这个具体内容公布出去

497
00:35:17,350 --> 00:35:20,710
就这个哈希值的当初的输入公布出去

498
00:35:21,310 --> 00:35:24,970
证明你在某个时间点已经知道某个知识了

499
00:35:29,040 --> 00:35:33,820
同学们有没有觉得这个应用场景听起来比较耳熟

500
00:35:37,040 --> 00:35:40,608
我们以前课上讲其他某个地方的时候

501
00:35:40,710 --> 00:35:42,340
也讲到类似的应用场景

502
00:35:45,120 --> 00:35:47,200
就是那个coin base域对吧

503
00:35:48,100 --> 00:35:48,820
我们讲

504
00:36:02,280 --> 00:36:05,052
Coin base transaction里面有一个coin base语

505
00:36:05,760 --> 00:36:07,641
你在这个域里写什么内容

506
00:36:07,930 --> 00:36:09,484
同样是没人管的

507
00:36:11,320 --> 00:36:13,050
所以为什么不用这种方法

508
00:36:15,920 --> 00:36:17,801
这个还不用销毁比特币了

509
00:36:18,000 --> 00:36:19,100
就可以直接往里写

510
00:36:24,600 --> 00:36:30,186
这种方法只有获得记账权的那个节点才能用

511
00:36:31,360 --> 00:36:32,980
如果你是一个全节点

512
00:36:33,530 --> 00:36:35,366
你挖矿挖到了

513
00:36:35,770 --> 00:36:37,192
然后你发布一个区块

514
00:36:37,710 --> 00:36:42,569
可以往这个coin base traduction里的coin base域写入一些内容

515
00:36:43,030 --> 00:36:43,750
这是可以的

516
00:36:44,800 --> 00:36:46,258
而我们说的这种方法

517
00:36:47,110 --> 00:36:49,904
是所有的节点都可以用的

518
00:36:50,450 --> 00:36:52,180
甚至你不一定是个节点

519
00:36:52,530 --> 00:36:55,330
可能就是一个普通的比特币上的用户

520
00:36:55,920 --> 00:36:59,520
任何人都可以用这种方法去写入一些内容

521
00:37:01,250 --> 00:37:02,216
大家听明白了吗

522
00:37:02,710 --> 00:37:05,691
发布交易不需要有记账权

523
00:37:06,300 --> 00:37:08,918
发布区块才需要有记账权

524
00:37:10,460 --> 00:37:15,500
任何用户都可以用这种方法销毁很少一点比特币

525
00:37:16,160 --> 00:37:18,200
比如说0．00一个比特币

526
00:37:19,210 --> 00:37:24,130
换取往这个区块链里面写入一些内容的机会

527
00:37:26,870 --> 00:37:28,729
我们接下来会看一些例子

528
00:37:29,270 --> 00:37:32,630
有些交易其实根本就没有销毁比特币

529
00:37:33,300 --> 00:37:35,172
只不过支付了交易费

530
00:37:36,210 --> 00:37:37,680
我们下面看两个实例

531
00:37:42,520 --> 00:37:44,494
这是个come base traction

532
00:37:45,310 --> 00:37:47,092
这个交易有两个输出

533
00:37:48,450 --> 00:37:52,530
第一个输出的脚本是正常的pay to public key hash

534
00:37:53,250 --> 00:38:00,018
输出的金额就是得到的block reward加上transaction费

535
00:38:00,250 --> 00:38:01,990
第二个输出的金额是0

536
00:38:02,800 --> 00:38:05,334
输出脚本就是刚才说的那种格式

537
00:38:05,970 --> 00:38:07,086
开头是return

538
00:38:07,550 --> 00:38:09,786
后面跟了一些乱七八糟的内容

539
00:38:10,740 --> 00:38:14,900
第二个输出的目的就是为了往区块链里写一些东西

540
00:38:18,700 --> 00:38:21,948
这是个普通的转账交易输出脚本

541
00:38:21,960 --> 00:38:23,664
也是以return开头的

542
00:38:24,460 --> 00:38:28,028
这个交易的输入是0．05个比特币

543
00:38:28,840 --> 00:38:30,220
输出金额是0

544
00:38:31,360 --> 00:38:35,440
说明输入金额全部用来支付交易费了

545
00:38:35,680 --> 00:38:38,560
这个交易其实并没有销毁任何比特币

546
00:38:39,070 --> 00:38:44,850
只不过把输入里的比特币作为交易费转给这个挖到矿的矿工了

547
00:38:49,880 --> 00:38:52,467
这种形式的脚本的一个好处是

548
00:38:53,940 --> 00:38:56,371
矿工看到这种脚本的时候

549
00:38:56,800 --> 00:39:00,235
知道它里面的输出永远不可能兑现

550
00:39:00,840 --> 00:39:05,106
所以就没有必要把它保存在UTXO里面

551
00:39:06,210 --> 00:39:08,838
这样对全节点是比较友好的

552
00:39:10,280 --> 00:39:11,340
大家​‌​‌​​‌‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​​‌‌‌​‌​​‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌​​‌‌‌‌‌‌​​‌‌‌​​‌​​‌‌​‌​‌​​‌‌‌‌‌‌​​‌‌​​​‌​​‌‌​​‌‌‌‌​‌‌​​‌​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌​​​‌​​‌‌​‌‌‌​​‌‌‌​​‌​​‌‌​‌‌‌‌‌​‌‌‌‌​​​‌‌‌​‌‌​​‌‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌​‌‌‌​​‌‌​‌‌​​​‌‌​‌‌‌​​‌‌​​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌​​​‌‌​​‌‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌​​‌‌​‌‌​​​‌‌​​‌‌‌‌​‌​‌‌​​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌​‌‌‌​‌​​​‌​​‌‌‌​​‌‌‌​‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌有什么问题吗

553
00:39:14,250 --> 00:39:15,370
就有一点说明一下

554
00:39:15,790 --> 00:39:20,263
我们这个PPT当中涉及到的比特币脚本的操作

555
00:39:21,220 --> 00:39:22,888
为了简单起见

556
00:39:23,170 --> 00:39:25,195
都没有加上op前缀

557
00:39:25,910 --> 00:39:28,810
就比如说我们前面写的

558
00:39:32,320 --> 00:39:38,290
Check sak实际上应该是off check check

559
00:39:39,640 --> 00:39:48,931
那么check multi sig也是off check multi tic还有这个due应该也叫做APP due

560
00:39:50,580 --> 00:39:53,520
我们这个PPT简单起见就没有把它写上去

561
00:39:55,750 --> 00:39:57,300
最后总结一下

562
00:39:58,730 --> 00:40:02,552
比特币系统当中用的这个脚本语言是非常简单的

563
00:40:03,290 --> 00:40:05,160
甚至连专门的名字都没有

564
00:40:05,840 --> 00:40:11,276
它就叫比特币脚本语言bitcoin scripting language

565
00:40:12,130 --> 00:40:16,868
我们后面可以看到像以太坊当中用的智能合约的语言

566
00:40:17,060 --> 00:40:18,952
就这就比这个要复杂得多

567
00:40:20,760 --> 00:40:25,224
比如说比特币的脚本语言不支持循环

568
00:40:26,860 --> 00:40:29,886
所以有很多功能这个语言是实现不了的

569
00:40:30,680 --> 00:40:33,298
这样的设计是有其用意的

570
00:40:34,820 --> 00:40:38,072
不支持循环就不会有死循环

571
00:40:38,810 --> 00:40:41,132
就不用担心停机问题

572
00:40:42,170 --> 00:40:43,226
大家听说过吧

573
00:40:43,230 --> 00:40:44,145
Halting problem

574
00:40:45,120 --> 00:40:46,926
像以太坊当中

575
00:40:47,070 --> 00:40:50,580
它的智能合约的语言是图灵完备的

576
00:40:50,990 --> 00:40:52,160
表达能力很强

577
00:40:52,760 --> 00:40:59,529
所以就要需要靠汽油费的机制来防止这个程序陷入死循环

578
00:41:01,680 --> 00:41:02,540
另外一方面

579
00:41:02,700 --> 00:41:08,596
我们注意这个语言虽然在某些方面功能是很有限的

580
00:41:09,380 --> 00:41:13,120
但是在另外一些方面它的功能却很强大

581
00:41:13,550 --> 00:41:16,686
就是跟密码学相关的功能是很强大的

582
00:41:18,210 --> 00:41:22,854
比如说这个check multiple c检查多重签名

583
00:41:23,380 --> 00:41:26,150
用一条语句就能够完成

584
00:41:26,960 --> 00:41:31,057
这个比很多通用的编程语言要方便得多

585
00:41:32,100 --> 00:41:36,654
所以比特币的脚本语言虽然看上去很简单

586
00:41:37,110 --> 00:41:41,880
但其实针对比特币的应用场景做了很好的优化

587
00:41:44,770 --> 00:41:45,580
还有问题吗

588
00:41:47,400 --> 00:41:48,860
我们这节课就上到这儿
